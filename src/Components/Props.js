function Props() {

 return (
  <div class="info">
    <h2 class="info__title">Props</h2>
    <p>Пропсы (сокращение от properties) - это данные, которые передаются в компоненты React для настройки их поведения и внешнего вида. Они позволяют передавать информацию из родительского компонента в дочерний компонент.
      Дочерний компонент может читать эти props и использовать их, например, для вывода данных на экран или для изменения своего поведения.
    </p>
    <h4>Передача пропсов компонентам</h4>
    <p>Пропсы передаются в компоненты в виде атрибутов при их использовании в JSX.</p>
    <pre>
      <div class="code">
{`// Родительский компонент
const ParentComponent = () => {
    const message = "Привет, Redev!";
    return <ChildComponent message={message} />;
}
// Дочерний компонент
const ChildComponent = (props) => {
    return <div>{props.message}</div>; }`}
      </div>
    </pre>
    <h4>Доступ к пропсам внутри компонентов</h4>
    <pre>
      <div class="code">
{`// Родительский компонент
const ParentComponent = () => {
    const message = "Привет, Redev!";
    return <ChildComponent message={message} />;
  }
// Дочерний компонент
const ChildComponent = (props) => {
    return <div>{props.message}</div>; 
 }
// либо сразу сделать деструктуризацию, ведь props это обычный объект
const ChildComponent = ({message}) => 
    return <div>{message}</div>; 
 }`}
      </div>
    </pre>
    <p>В функциональных компонентах пропсы доступны как параметр функции компонента. </p>
    <p>Props можно использовать для передачи любых данных, включая строки, числа, массивы, объекты и функции. 
       Пропсы являются неизменяемыми (immutable), их нельзя изменять напрямую.
       Пропсы в React играют важную роль в передаче данных и настройке компонентов. Они позволяют создавать  переиспользуемые компоненты. Правильное использование пропсов способствует лучшей организации кода и разделению ответственности между компонентами.</p>
  </div>
    );
  }
  export default Props;