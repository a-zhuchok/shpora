function ReactHookFormVSformik() {
    return (
      <div class="info">
        <h2 class="info__title">Формы и их обработка в React. react-hook-form VS formik</h2>
        <p>Формы - это часть большинства веб-приложений.В React существует несколько способов использования форм в приложении, в зависимости от потребностей и предпочтений разработчика. Ниже перечислены основные варианты использования форм в React приложении:</p>
        <ul>
          <li>Управляемые компоненты форм:</li>
          <p>В этом подходе значения полей формы хранятся в состоянии компонента. Каждое поле формы связано с состоянием и обновляется через callback-функцию.</p>
          <li>Неуправляемые компоненты форм:</li>
          <p>В этом подходе значения полей формы хранятся непосредственно в DOM, а не в состоянии компонента.</p>
          <li>Ref-подход:</li>
          <p>В этом случае значения полей формы считываются через ref, которые позволяют получить доступ к DOM-элементам. Этот подход может быть удобен, когда тебе нужно быстро получить значения полей без явного сохранения их в состояние компонента. </p>
          <li>Библиотеки управления формами:</li>
          <p>Существуют библиотеки, такие как React Hook Form и Formik , которые предоставляют более высокоуровневые решения для работы с формами. Они упрощают управление состоянием, валидацией, обработкой отправки и другими аспектами работы с формами.</p>
        </ul>
        <h4 class='info__title'>React Hook Form</h4>
        <p>React Hook Form - это библиотека, которая значительно упрощает процесс работы с формами в React приложениях. Она позволяет создавать интерактивные и дружественные формы с минимумом лишнего кода.</p>
        <h4 class='info__title'>Formik</h4>
        <p>Formik - это еще одна библиотека для управления формами в приложениях на React. Её основная цель - упростить и облегчить процесс работы с формами, сбора данных от пользователя и их валидации. </p>
      </div>
    );
  }
  export default ReactHookFormVSformik;